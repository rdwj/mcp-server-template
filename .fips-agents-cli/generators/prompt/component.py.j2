"""{{ description }}"""

from pydantic import Field
{% if needs_prompt_imports -%}
from fastmcp.prompts.prompt import Message, PromptMessage, PromptResult, TextContent
{% endif -%}
{% if with_context -%}
from fastmcp import Context
{% endif -%}
from core.app import mcp


{% if prompt_name or title or tags or not enabled or meta -%}
@mcp.prompt(
{%- if prompt_name %}
    name="{{ prompt_name }}",
{%- endif %}
{%- if title %}
    title="{{ title }}",
{%- endif %}
{%- if description and (prompt_name or title or tags or not enabled or meta) %}
    description="{{ description }}",
{%- endif %}
{%- if tags %}
    tags={{ '{' }}{% for tag in tags %}"{{ tag }}"{% if not loop.last %}, {% endif %}{% endfor %}{{ '}' }},
{%- endif %}
{%- if not enabled %}
    enabled=False,
{%- endif %}
{%- if meta %}
    meta={{ meta }},
{%- endif %}
)
{% else -%}
@mcp.prompt
{% endif -%}
{% if async %}async {% endif %}def {{ component_name }}(
{% if with_context %}    ctx: Context,
{% endif %}{% for param in params %}    {{ param.name }}: {{ param.type_hint }} = Field(
{% if param.default is defined %}        default={{ param.default }},
{% endif %}        description="{{ param.description }}"
    ),
{% endfor %}) -> {{ return_type }}:
    """{{ description }}

    Args:
{% if params|length > 0 %}{% for param in params %}        {{ param.name }}: {{ param.description }}
{% endfor %}{% endif %}{% if with_context %}        ctx: FastMCP Context object for accessing request metadata
{% endif %}
    Returns:
        {{ return_description|default('Formatted prompt for LLM interaction') }}
    """
{% if return_type == "str" %}
    return f"""{{ prompt_instruction|default('Analyze and process the following:') }}

{% for param in params %}{% if not param.get('optional', False) %}<{{ param.name }}>
{{ '{' }}{{ param.name }}{{ '}' }}
</{{ param.name }}>

{% endif %}{% endfor %}
{%- if with_schema %}
Return as JSON:
{{ '{' }}
  "result": "{{ result_field|default('Main result') }}",
  "details": "{{ details_field|default('Additional details') }}"
{{ '}' }}
{%- else %}
# TODO: Add specific prompt instructions
# Provide clear, structured guidance for the LLM
{%- endif %}"""

{% elif return_type == "PromptMessage" %}
    content = f"""{{ prompt_instruction|default('Analyze and process the following:') }}

{% for param in params %}{% if not param.get('optional', False) %}<{{ param.name }}>
{{ '{' }}{{ param.name }}{{ '}' }}
</{{ param.name }}>

{% endif %}{% endfor %}
{%- if with_schema %}
Return as JSON:
{{ '{' }}
  "result": "{{ result_field|default('Main result') }}",
  "details": "{{ details_field|default('Additional details') }}"
{{ '}' }}
{%- else %}
# TODO: Add specific prompt instructions
{%- endif %}"""

    return PromptMessage(
        role="user",
        content=TextContent(type="text", text=content)
    )

{% elif return_type == "PromptResult" or return_type == "list[PromptMessage]" %}
    # Generate a multi-message conversation
    messages = [
        Message(f"""{{ prompt_instruction|default('Analyze and process the following:') }}

{% for param in params %}{% if not param.get('optional', False) %}<{{ param.name }}>
{{ '{' }}{{ param.name }}{{ '}' }}
</{{ param.name }}>

{% endif %}{% endfor %}
{%- if with_schema %}
Return as JSON:
{{ '{' }}
  "result": "{{ result_field|default('Main result') }}",
  "details": "{{ details_field|default('Additional details') }}"
{{ '}' }}
{%- else %}
# TODO: Add specific prompt instructions
{%- endif %}"""),
        # TODO: Add additional messages for conversation context
        # Message("Response or context", role="assistant"),
    ]

    return messages
{% endif %}
