"""{{ description }}"""

from pydantic import Field
from core.app import mcp


@mcp.prompt
def {{ component_name }}(
{% for param in params %}    {{ param.name }}: {{ param.type_hint }} = Field(
{% if param.default is defined %}        default={{ param.default }},
{% endif %}        description="{{ param.description }}"
    ),
{% endfor %}) -> str:
    """{{ description }}

    Args:
{% if params|length > 0 %}{% for param in params %}        {{ param.name }}: {{ param.description }}
{% endfor %}{% endif %}
    Returns:
        {{ return_description|default('Formatted prompt string for LLM interaction') }}
    """
    return f"""{{ prompt_instruction|default('Analyze and process the following:') }}

{% for param in params %}{% if not param.get('optional', False) %}<{{ param.name }}>
{{ '{' }}{{ param.name }}{{ '}' }}
</{{ param.name }}>

{% endif %}{% endfor %}
{%- if with_schema %}
Return as JSON:
{{ '{' }}
  "result": "{{ result_field|default('Main result') }}",
  "details": "{{ details_field|default('Additional details') }}"
{{ '}' }}
{%- else %}
# TODO: Add specific prompt instructions
# Provide clear, structured guidance for the LLM
# Use JSON schema when structured output is needed
{%- endif %}"""
